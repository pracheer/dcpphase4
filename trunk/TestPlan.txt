Description:

ServiceId is the is the Id of the service 
To run branchservers and failure-detection-servers, id, topology and config are to be given as arguments. 
eg: java -cp <jar file> branch.server.BranchServer -topology <filename> -id M01 -servers <filename> -config <filename>

To run Gui JVM, GUI-id(id) and topology file are to be given as arguments.
eg: java -cp <jar file> branch.server.BranchServer -topology <filename> -id G01 -servers <filename> -config <filename>

Test Cases:
We have included unit tests with our src under the "test" package.

SensorTest:
We created one FDSensorTest that starts multiple sensors.
We manually stop some sensors and see that the other sensors are able to see the change (by debug message).
Then bringing up the sensor again is reflected in the sensor graph.
We also put one sensor in sleep and see that the other sensors wait for response from that sensor to reach a consensus.

Besides that the following scenarios were tested manually-

TEST 1:
1. A single service was started with a single server.
2. Initial configuration through config file.
3. All transfer, deposit, withdraw and query worked fine within the same service.

TEST 2: 
1. A single service was started with 3 servers.
2. Initial configuration through config file.
3. All transfer, deposit, withdraw and query worked fine within the same service.

TEST 3:
1. Two services were started in two different machines. Each having two replicas.
2. Initial configuration through config file.
3. All interbranch transfer worked fine between the two services.

TEST4:
1. A single service was started with 3 servers.
2. Initial configuration through config file.
3. All transfer, deposit, withdraw and query worked fine within the same service.
4. Bring down one of the machines (with all replicas). The FailureDetector automatically detects it and the service works.
5. Bring the machine back up. The FailureDetector automatically detects it and the service works.

TEST5:
1. A single service was started with 3 servers.
2. Initial configuration through config file.
3. All transfer, deposit, withdraw and query worked fine within the same service.
4. Bring down one of the machines (with all replicas). The FailureDetector automatically detects it and the service works.
5. Bring the machine back up. The FailureDetector automatically detects it and the service works.
6. Tried different combinations like removing the machine from HEAD, TAIL or MIDDLE of a service.

TEST7:
1. A single service was started with 3 servers.
2. Initial configuration through config file.
4. A request was sent from the GUI to this service. 
5. While the request was pending at head (by adding a sleep), tail was killed and the oracle was updated.
6. We observed that message was not lost.
7. We also observed that even if server 1 failed to connect to server 2 in the first attempt, when the view got updated, the request was passed onto the tail successfully.
8. Also all the pending requests in server 1, were passed to the successor of server2 as per the chain replication protocol.