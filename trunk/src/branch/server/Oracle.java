package branch.server;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import javax.swing.JFormattedTextField;



/**
 * Launches the Oracle GUI and performs its functions
 * @author Nikhil
 * 
 */
public class Oracle extends javax.swing.JFrame {
	private static final String ORACLE = "ORACLE";
	public static final String LINE = "------------------------------------------------------------------------------\n";
	private static NodeProperties properties_;

	
	/** Creates new form BranchGUI */
	public Oracle() {
		super(ORACLE);
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		messageLabel = new javax.swing.JLabel();
		removeServerButton = new javax.swing.JButton();
		textArea = new JTextArea(15, 70);
		textArea.setEditable(false);
		textArea.setLineWrap(true);
		textArea.setWrapStyleWord(true);
		textArea.setLineWrap(true);

		JScrollPane pScroll = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		getContentPane().add(pScroll);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		messageLabel.setText("Message:");

		removeServerButton.setText("Remove Server");
		removeServerButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeServerButtonActionPerformed(evt);
			}
		});

		JButton addServerButton = new JButton();
		addServerButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				addServerActionPerformed(evt);
			}
		});
		addServerButton.setText("Add Server");

		JLabel label = new JLabel();
		label.setText("Server Name:");

		serverNameTextField = new JFormattedTextField();


		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		layout.setHorizontalGroup(
				layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(31)
						.addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(removeServerButton)
										.addGap(37)
										.addComponent(addServerButton, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addComponent(label, GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
												.addPreferredGap(ComponentPlacement.RELATED)
												.addComponent(serverNameTextField, GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
												.addGap(24)))
												.addGap(60))
												.addGroup(layout.createSequentialGroup()
														.addGap(4)
														.addGroup(layout.createParallelGroup(Alignment.LEADING)
																.addGroup(layout.createSequentialGroup()
																		.addComponent(messageLabel, GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
																		.addGap(60))
																		.addComponent(pScroll, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
																		.addContainerGap())
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(17)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(label, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
								.addComponent(serverNameTextField, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
								.addGap(8)
								.addGroup(layout.createParallelGroup(Alignment.BASELINE)
										.addComponent(removeServerButton)
										.addComponent(addServerButton))
										.addGap(18)
										.addComponent(messageLabel, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(ComponentPlacement.RELATED)
										.addComponent(pScroll, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
										.addGap(54))
		);
		getContentPane().setLayout(layout);
		pack();
	}// </editor-fold>
	private javax.swing.JLabel messageLabel;
	private javax.swing.JButton removeServerButton;
	private javax.swing.JTextArea textArea;
	private javax.swing.JFormattedTextField serverNameTextField;
	// End of variables declaration

	private void removeServerButtonActionPerformed(java.awt.event.ActionEvent evt) {
		View view;
		String server = serverNameTextField.getText();
		String groupid = NodeName.getService(server);

		if (!checkServerNameFormat(serverNameTextField.getText())) {
			textArea.append("Server Name format incorrect. View not updated.\n"+LINE);
			return;
		}
		
		if(properties_.views_.containsKey(groupid)) {
			view = properties_.views_.get(groupid);
			if (view.removeServer(server)) {
				if(view.isEmpty())
					properties_.views_.remove(groupid);
				else
					properties_.views_.put(groupid, view);			
				// Sending the new view to EVERYONE
				// TODO the server is still ON. 
				//what does it do when it does not find itself in the view.
				SpecialMsg spl = new SpecialMsg(SpecialMsg.Type.VIEW, view, null, null);
				Message msg = new Message(properties_.getNode(), spl);
				broadcastView(msg);
				textArea.append("Server " + server + " removed. Updated view is:" + "\n");
				textArea.append(view.prettyString() + "\n" + LINE);
			} 
			else {
				textArea.append("Error: can't find server\n" + LINE);
			}
		} 
		else {
			textArea.append("Error: can't find server.\n" + LINE);
		}		
	}

	private void broadcastView (Message msg) {
		ArrayList<String> listOfServers = new ArrayList<String>();
		Set<String> keySet = properties_.views_.keySet();
		for (String key : keySet) {
			View view = properties_.views_.get(key);
			listOfServers.addAll(view.listOfServers);
			NetworkWrapper.send(msg.toString(), NodeName.getGUI(key));
		}
		for (String server : listOfServers) {
			NetworkWrapper.sendToServer(msg.toString(), server);
		}
	}
	private boolean checkServerNameFormat (String str) {
		// Initialize reg ex for numeric data.
		String expression = "^S[0-9][0-9]_[0-9][0-9]$";
		CharSequence inputStr = str;
		Pattern pattern = Pattern.compile(expression);
		Matcher matcher = pattern.matcher(inputStr);
		if (matcher.matches()) {
			return true;
		}
		return false;
	}
	private void addServerActionPerformed(ActionEvent evt) {
		
		ArrayList<String> initialConfig = new ArrayList<String>();
		if (!checkServerNameFormat(serverNameTextField.getText())) {
			textArea.append("Server Name format incorrect. View not updated.\n"+LINE);
			return;
		}
		initialConfig.add(serverNameTextField.getText());

		for (String server : initialConfig) {
			String groupid = NodeName.getService(server);
			View view;
			if(properties_.views_.containsKey(groupid))
				view = properties_.views_.get(groupid);
			else
				view = new View(groupid);

			view.addServer(server);

			properties_.views_.put(groupid, view);

			Message msg;
			
			// Send all the views to this new server.
			Set<String> groups = properties_.views_.keySet();
			for (String group : groups) {
				
				// As this view would be part of Broadcast Message to everyone 
				// including this server. So in order to avoid duplicate messages,
				// it is being skipped here.
				if(group.equalsIgnoreCase(groupid))
					continue;
				View tmpView = properties_.views_.get(group);
				SpecialMsg spl = new SpecialMsg(tmpView);
				msg = new Message(properties_.getNode(), spl);
				NetworkWrapper.sendToServer(msg.toString(), server);
			}
			
			// Sending the new view to EVERYONE
			SpecialMsg spl = new SpecialMsg(view);
			msg = new Message(properties_.getNode(), spl);
			broadcastView(msg);
			textArea.append("Server " + server + " added. Updated view is:" + "\n");
			textArea.append(view.prettyString() + "\n" + LINE);
		}
	}

	public static class GuiThread implements Runnable {
		private Oracle gui_;

		public GuiThread(Oracle gui) {
			gui_ = gui;
		}

		public void run() {
			gui_.setVisible(true);
		}
	}

	public static void main(String args[]) {
	
		try {
			properties_ = new NodeProperties(args, true);
		} catch (NodeProperties.NodePropertiesException e) {
			e.printStackTrace();
			System.err.println("Unable to parse CLI for Oracle GUI");
		}
		NetworkWrapper.setProperties(properties_);
		Oracle oracleGUI = new Oracle();
		GuiThread guiThread = new GuiThread(oracleGUI);
		java.awt.EventQueue.invokeLater(guiThread);

		System.out.println(properties_.print());

		try {
			BufferedReader reader = new BufferedReader(new FileReader(properties_.configFile_));
			String str;
			Thread.sleep(100);
			while((str = reader.readLine())!= null) {
				if(str.startsWith("#") || str.isEmpty())
					continue;
				str = str.trim();
				int index1 = str.indexOf(Trxn.msgSeparator);
				int sleepTime = Integer.parseInt(str.substring(0, index1));
				int index2 = str.indexOf(Trxn.msgSeparator, index1 + Trxn.msgSeparator.length());
				String action = str.substring(index1 + Trxn.msgSeparator.length(), index2);
				String serverName = str.substring(index2 + Trxn.msgSeparator.length());
				Thread.sleep(sleepTime);
				oracleGUI.serverNameTextField.setText(serverName);
				ActionEvent evt = null;
				if(action.equalsIgnoreCase("ADD")) {
					oracleGUI.addServerActionPerformed(evt);
				} else if (action.equalsIgnoreCase("REMOVE")) {
					oracleGUI.removeServerButtonActionPerformed(evt);
				}
			}
		} catch (Exception e) {
			System.out.println("Oracele running in normal mode. No testfile found.");
		}
	}
}
